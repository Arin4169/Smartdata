import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from collections import Counter
from wordcloud import WordCloud
import matplotlib.font_manager as fm
from konlpy.tag import Okt
import platform
import os
from utils import (
    generate_wordcloud_data, 
    create_wordcloud, 
    simple_sentiment_analysis, 
    analyze_options,
    get_font_path,
    get_stopwords,
    add_stopword,
    reset_stopwords,
    remove_stopword,
    DEFAULT_STOPWORDS
)

# 한글 폰트 설정
korean_font_path = get_font_path()
if korean_font_path:
    plt.rcParams['font.family'] = fm.FontProperties(fname=korean_font_path).get_name()
else:
    # 폰트 경로를 찾을 수 없는 경우 시스템 내장 폰트 사용 시도
    try:
        # Windows
        if platform.system() == 'Windows':
            plt.rcParams['font.family'] = 'Malgun Gothic'
        # macOS
        elif platform.system() == 'Darwin':
            plt.rcParams['font.family'] = 'AppleGothic'
        # Linux
        else:
            plt.rcParams['font.family'] = 'NanumGothic'
    except:
        st.warning("한글 폰트를 설정할 수 없습니다. 시각화에서 한글이 제대로 표시되지 않을 수 있습니다.")

plt.rcParams['axes.unicode_minus'] = False

# 페이지 기본 설정
st.set_page_config(
    page_title="스마트 스토어 데이터 분석",
    page_icon="📊",
    layout="wide"
)

# 제목 표시
st.title("네이버 스마트 스토어 데이터 분석")

# 함수: 불용어 관리 UI 생성
def render_stopwords_ui():
    """불용어 관리 UI를 표시합니다."""
    with st.expander("워드클라우드 불용어 관리", expanded=False):
        # 현재 불용어 목록 표시
        st.subheader("현재 불용어 목록")
        current_stopwords = get_stopwords()
        
        # 불용어를 여러 열로 표시
        cols = st.columns(4)
        for i, word in enumerate(sorted(current_stopwords)):
            with cols[i % 4]:
                if st.button(f"❌ {word}", key=f"remove_{word}"):
                    remove_stopword(word)
                    st.rerun()
        
        # 새 불용어 추가
        st.subheader("불용어 추가")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            new_stopword = st.text_input("추가할 불용어 (여러 단어는 공백으로 구분)", key="new_stopword")
        
        with col2:
            if st.button("추가", key="add_stopword"):
                if new_stopword.strip():
                    add_stopword(new_stopword)
                    st.session_state.new_stopword = ""  # 입력 필드 초기화
                    st.rerun()
        
        # 불용어 초기화
        if st.button("기본 불용어로 초기화", key="reset_stopwords"):
            reset_stopwords()
            st.rerun()
        
        st.info("불용어는 워드클라우드에서 제외되는 단어입니다. 불필요하게 자주 등장하는 단어를 추가하면 더 의미 있는 분석이 가능합니다.")

# 함수: 파일 유형 자동 감지
def detect_file_type(df):
    """업로드된 파일의 유형을 자동으로 감지합니다"""
    # 리뷰 파일 감지
    potential_review_columns = ['REVIEW_CONTENT', 'review_content', '리뷰내용', '내용', 'CONTENT']
    if any(col in df.columns for col in potential_review_columns):
        return "review"
    
    # 옵션 비율 파일 감지
    potential_option_columns = ['OPTION_INFO', 'option_info', '옵션정보', '옵션명', '상품옵션']
    potential_count_columns = ['COUNT', 'count', '수량', '판매량', '판매수량']
    if any(col in df.columns for col in potential_option_columns) and any(col in df.columns for col in potential_count_columns):
        return "option"
    
    # 판매 현황 파일 감지 (기타 파일은 판매 현황으로 간주)
    return "sales"

# 함수: 리뷰 데이터프레임 컬럼 이름 확인 및 수정
def check_review_columns(df):
    """리뷰 데이터 컬럼 이름 확인 및 표준화"""
    # 리뷰 내용을 담는 컬럼 확인
    potential_review_columns = ['REVIEW_CONTENT', 'review_content', '리뷰내용', '내용', 'CONTENT']
    review_col = None
    
    for col in potential_review_columns:
        if col in df.columns:
            review_col = col
            break
    
    if review_col and review_col != 'review_content':
        df = df.rename(columns={review_col: 'review_content'})
    
    return df

# 함수: 옵션 데이터프레임 컬럼 이름 확인 및 수정
def check_option_columns(df):
    """옵션 데이터 컬럼 이름 확인 및 표준화"""
    # 옵션 정보를 담는 컬럼 확인
    potential_option_columns = ['OPTION_INFO', 'option_info', '옵션정보', '옵션명', '상품옵션']
    option_col = None
    
    for col in potential_option_columns:
        if col in df.columns:
            option_col = col
            break
    
    # 수량/판매량 정보를 담는 컬럼 확인
    potential_count_columns = ['COUNT', 'count', '수량', '판매량', '판매수량']
    count_col = None
    
    for col in potential_count_columns:
        if col in df.columns:
            count_col = col
            break
    
    # 컬럼명 표준화
    if option_col and option_col != 'option_info':
        df = df.rename(columns={option_col: 'option_info'})
    
    if count_col and count_col != 'count':
        df = df.rename(columns={count_col: 'count'})
    
    return df

# 사이드바 - 파일 업로드 및 메뉴
with st.sidebar:
    st.header("데이터 업로드")
    uploaded_file = st.file_uploader("스마트 스토어 데이터 파일", type=["xlsx", "csv"], help="리뷰 분석, 옵션 비율, 판매 현황 등의 파일을 업로드하세요.")
    
    # 파일 타입 설명
    with st.expander("파일 타입 설명"):
        st.info("""
        • 리뷰 분석 파일: 리뷰 내용 컬럼을 포함한 파일
        • 옵션 비율 파일: 옵션 정보와 판매량/수량 컬럼을 포함한 파일
        • 판매 현황 파일: 기타 판매 관련 파일
        
        파일 유형은 자동으로 감지됩니다.
        """)
    
    st.header("분석 메뉴")
    analysis_option = st.radio(
        "분석 유형 선택",
        ["리뷰 분석 - 워드클라우드", "리뷰 분석 - 감정분석", "옵션 분석"]
    )

# 데이터 저장 변수
review_df = None
option_df = None
sales_df = None

# 메인 화면
if uploaded_file is None:
    st.info("👈 왼쪽 사이드바에서 파일을 업로드해주세요.")
    
    # 샘플 데이터 사용 옵션
    if st.button("샘플 데이터로 시작하기"):
        try:
            # 샘플 데이터 로드
            review_df = pd.read_excel("data/reviewcontents (3).xlsx")
            option_df = pd.read_excel("data/옵션비율 (1).xlsx")
            sales_df = pd.read_excel("data/스토어전체판매현황 (1).xlsx")
            
            # 데이터 컬럼 표준화
            review_df = check_review_columns(review_df)
            option_df = check_option_columns(option_df)
            
            st.success("샘플 데이터를 불러왔습니다!")
            
            # 샘플 데이터 미리보기
            st.subheader("샘플 데이터 미리보기")
            
            st.write("리뷰 데이터:")
            st.dataframe(review_df.head(3))
            
            st.write("옵션 데이터:")
            st.dataframe(option_df.head(3))
            
            st.write("판매 현황 데이터:")
            st.dataframe(sales_df.head(3))
            
            # 분석 유형에 따른 처리
            if analysis_option == "리뷰 분석 - 워드클라우드":
                st.subheader("워드클라우드 분석")
                
                # 불용어 관리 UI 표시
                render_stopwords_ui()
                
                with st.spinner("워드클라우드 생성 중..."):
                    word_count, top_words = generate_wordcloud_data(review_df, 'review_content')
                    
                    # 워드클라우드 생성
                    if word_count:
                        wc = create_wordcloud(word_count)
                        
                        # 워드클라우드와 상위 20개 단어를 좌우로 배치
                        col1, col2 = st.columns([1.5, 1])
                        
                        with col1:
                            # 워드클라우드 제목 추가 (중앙 정렬)
                            st.markdown("<h3 style='text-align: center;'>워드클라우드</h3>", unsafe_allow_html=True)
                            
                            # 워드클라우드 표시
                            fig1, ax = plt.subplots(figsize=(10, 10))
                            ax.imshow(wc, interpolation='bilinear')
                            ax.axis('off')
                            plt.tight_layout(pad=0)
                            st.pyplot(fig1)
                        
                        with col2:
                            # 상위 20개 단어 표시 (중앙 정렬)
                            st.markdown("<h3 style='text-align: center;'>상위 20개 단어</h3>", unsafe_allow_html=True)
                            
                            # 상위 단어 막대 그래프
                            top_words_df = pd.DataFrame({
                                '단어': list(top_words.keys()),
                                '언급 횟수': list(top_words.values())
                            })
                            
                            # 정확히 같은 크기로 그래프 생성
                            fig2, ax = plt.subplots(figsize=(10, 10))
                            bars = ax.barh(top_words_df['단어'], top_words_df['언급 횟수'], color='steelblue')
                            
                            # 리뷰 수 표시
                            for i, bar in enumerate(bars):
                                width = bar.get_width()
                                ax.text(width + width*0.02, bar.get_y() + bar.get_height()/2, 
                                        f'{int(width):,}', 
                                        va='center', fontsize=9)
                            
                            # x축 범위 조정 (여백 줄이기)
                            if len(top_words) > 0:
                                max_count = max(top_words.values())
                                plt.xlim(0, max_count * 1.15)  # 텍스트 위한 여유 공간
                                
                            # 그래프 제목 및 레이아웃 조정
                            plt.title('')
                            plt.tight_layout(pad=0.2)
                            st.pyplot(fig2)
                    else:
                        st.warning("분석할 리뷰 데이터가 충분하지 않습니다.")
            
            elif analysis_option == "리뷰 분석 - 감정분석":
                st.subheader("감정 분석")
                
                with st.spinner("감정 분석 중..."):
                    # 감정 분석 수행
                    df_sentiment, sentiment_counts = simple_sentiment_analysis(review_df, 'review_content')
                    
                    # 감정 분석 결과 표시
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # 감정 분포 파이 차트
                        fig = plt.figure(figsize=(6, 4))
                        sns.barplot(x=sentiment_counts['감정'], y=sentiment_counts['리뷰 수'], orient='h')
                        plt.title('리뷰 감정 분포')
                        st.pyplot(fig)
                    
                    with col2:
                        # 감정별 리뷰 수 막대 그래프
                        fig = plt.figure(figsize=(6, 4))
                        sns.barplot(x='감정', y='리뷰 수', data=sentiment_counts)
                        plt.title('감정별 리뷰 수')
                        st.pyplot(fig)
                    
                    # 감정별 리뷰 샘플 표시
                    st.subheader("감정별 리뷰 샘플")
                    
                    # 탭 생성
                    tab1, tab2, tab3 = st.tabs(["긍정 리뷰", "중립 리뷰", "부정 리뷰"])
                    
                    with tab1:
                        positive_reviews = df_sentiment[df_sentiment['sentiment'] == '긍정'].head(5)
                        if not positive_reviews.empty:
                            for _, row in positive_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("긍정 리뷰가 없습니다.")
                    
                    with tab2:
                        neutral_reviews = df_sentiment[df_sentiment['sentiment'] == '중립'].head(5)
                        if not neutral_reviews.empty:
                            for _, row in neutral_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("중립 리뷰가 없습니다.")
                    
                    with tab3:
                        negative_reviews = df_sentiment[df_sentiment['sentiment'] == '부정'].head(5)
                        if not negative_reviews.empty:
                            for _, row in negative_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("부정 리뷰가 없습니다.")
            
            elif analysis_option == "옵션 분석":
                st.subheader("옵션 분석")
                
                with st.spinner("옵션 분석 중..."):
                    # 옵션 분석 수행
                    top_options = analyze_options(option_df, 'option_info', 'count')
                    
                    # 상위 10개 옵션 표시
                    st.subheader("상위 10개 옵션")
                    st.dataframe(top_options)
                    
                    # 상위 10개 옵션 막대 그래프
                    fig = plt.figure(figsize=(10, 6))
                    sns.barplot(x='option_info', y='count', data=top_options)
                    plt.title('상위 10개 옵션 판매량')
                    st.pyplot(fig)
        
        except Exception as e:
            st.error(f"샘플 데이터를 불러오는 중 오류가 발생했습니다: {e}")
else:
    # 데이터 로드
    try:
        # 파일 업로드 시 데이터 로드
        file_extension = uploaded_file.name.split('.')[-1].lower()
        if file_extension == 'csv':
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
            
        # 파일 유형 감지
        file_type = detect_file_type(df)
        
        if file_type == "review":
            review_df = check_review_columns(df)
            st.sidebar.success("리뷰 파일이 업로드되었습니다.")
        elif file_type == "option":
            option_df = check_option_columns(df)
            st.sidebar.success("옵션 비율 파일이 업로드되었습니다.")
        else:  # sales
            sales_df = df
            st.sidebar.success("판매 현황 파일이 업로드되었습니다.")
        
        # 파일 정보 표시
        st.subheader("업로드된 파일 정보")
        st.write(f"파일명: {uploaded_file.name}")
        st.write(f"파일 유형: {'리뷰 분석 파일' if file_type == 'review' else '옵션 비율 파일' if file_type == 'option' else '판매 현황 파일'}")
        st.dataframe(df.head(3))
        
        # 분석 유형에 따른 처리
        if analysis_option == "리뷰 분석 - 워드클라우드":
            if file_type == "review":
                st.header("리뷰 워드클라우드 분석")
                
                # 불용어 관리 UI 표시
                render_stopwords_ui()
                
                with st.spinner("워드클라우드 생성 중..."):
                    word_count, top_words = generate_wordcloud_data(review_df, 'review_content')
                    
                    # 워드클라우드 생성
                    if word_count:
                        wc = create_wordcloud(word_count)
                        
                        # 워드클라우드와 상위 20개 단어를 좌우로 배치
                        col1, col2 = st.columns([1.5, 1])
                        
                        with col1:
                            # 워드클라우드 제목 추가 (중앙 정렬)
                            st.markdown("<h3 style='text-align: center;'>워드클라우드</h3>", unsafe_allow_html=True)
                            
                            # 워드클라우드 표시
                            fig1, ax = plt.subplots(figsize=(10, 10))
                            ax.imshow(wc, interpolation='bilinear')
                            ax.axis('off')
                            plt.tight_layout(pad=0)
                            st.pyplot(fig1)
                        
                        with col2:
                            # 상위 20개 단어 표시 (중앙 정렬)
                            st.markdown("<h3 style='text-align: center;'>상위 20개 단어</h3>", unsafe_allow_html=True)
                            
                            # 상위 단어 막대 그래프
                            top_words_df = pd.DataFrame({
                                '단어': list(top_words.keys()),
                                '언급 횟수': list(top_words.values())
                            })
                            
                            # 정확히 같은 크기로 그래프 생성
                            fig2, ax = plt.subplots(figsize=(10, 10))
                            bars = ax.barh(top_words_df['단어'], top_words_df['언급 횟수'], color='steelblue')
                            
                            # 리뷰 수 표시
                            for i, bar in enumerate(bars):
                                width = bar.get_width()
                                ax.text(width + width*0.02, bar.get_y() + bar.get_height()/2, 
                                        f'{int(width):,}', 
                                        va='center', fontsize=9)
                            
                            # x축 범위 조정 (여백 줄이기)
                            if len(top_words) > 0:
                                max_count = max(top_words.values())
                                plt.xlim(0, max_count * 1.15)  # 텍스트 위한 여유 공간
                                
                            # 그래프 제목 및 레이아웃 조정
                            plt.title('')
                            plt.tight_layout(pad=0.2)
                            st.pyplot(fig2)
                    else:
                        st.warning("분석할 리뷰 데이터가 충분하지 않습니다.")
            else:
                st.warning("리뷰 분석을 위해 리뷰 파일을 업로드해주세요.")
            
        elif analysis_option == "리뷰 분석 - 감정분석":
            if file_type == "review":
                st.header("리뷰 감정분석")
                
                with st.spinner("감정 분석 중..."):
                    # 감정 분석 수행
                    df_sentiment, sentiment_counts = simple_sentiment_analysis(review_df, 'review_content')
                    
                    # 감정 분석 결과 표시
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # 감정 분포 파이 차트
                        fig = plt.figure(figsize=(6, 4))
                        sns.barplot(x=sentiment_counts['감정'], y=sentiment_counts['리뷰 수'], orient='h')
                        plt.title('리뷰 감정 분포')
                        st.pyplot(fig)
                    
                    with col2:
                        # 감정별 리뷰 수 막대 그래프
                        fig = plt.figure(figsize=(6, 4))
                        sns.barplot(x='감정', y='리뷰 수', data=sentiment_counts)
                        plt.title('감정별 리뷰 수')
                        st.pyplot(fig)
                    
                    # 감정별 리뷰 샘플 표시
                    st.subheader("감정별 리뷰 샘플")
                    
                    # 탭 생성
                    tab1, tab2, tab3 = st.tabs(["긍정 리뷰", "중립 리뷰", "부정 리뷰"])
                    
                    with tab1:
                        positive_reviews = df_sentiment[df_sentiment['sentiment'] == '긍정'].head(5)
                        if not positive_reviews.empty:
                            for _, row in positive_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("긍정 리뷰가 없습니다.")
                    
                    with tab2:
                        neutral_reviews = df_sentiment[df_sentiment['sentiment'] == '중립'].head(5)
                        if not neutral_reviews.empty:
                            for _, row in neutral_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("중립 리뷰가 없습니다.")
                    
                    with tab3:
                        negative_reviews = df_sentiment[df_sentiment['sentiment'] == '부정'].head(5)
                        if not negative_reviews.empty:
                            for _, row in negative_reviews.iterrows():
                                st.write(f"- {row['review_content']}")
                        else:
                            st.write("부정 리뷰가 없습니다.")
            else:
                st.warning("리뷰 분석을 위해 리뷰 파일을 업로드해주세요.")
            
        elif analysis_option == "옵션 분석":
            if file_type == "option":
                st.header("옵션 분석")
                
                with st.spinner("옵션 분석 중..."):
                    # 옵션 분석 수행
                    top_options = analyze_options(option_df, 'option_info', 'count')
                    
                    # 상위 10개 옵션 표시
                    st.subheader("상위 10개 옵션")
                    st.dataframe(top_options)
                    
                    # 상위 10개 옵션 막대 그래프
                    fig = plt.figure(figsize=(10, 6))
                    sns.barplot(x='option_info', y='count', data=top_options)
                    plt.title('상위 10개 옵션 판매량')
                    st.pyplot(fig)
            else:
                st.warning("옵션 분석을 위해 옵션 비율 파일을 업로드해주세요.")
            
    except Exception as e:
        st.error(f"데이터 처리 중 오류가 발생했습니다: {e}") 